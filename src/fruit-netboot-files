#!/sbin/openrc-run

description="Set up netboot files on a master node."

home=/media/mmcblk0p1/netboot
target=/var/netboot
config=/media/mmcblk0p1/fruit.json
apks=/media/mmcblk0p1/apks
share=/data/netboot/share

depend() {
  after ntp-client
  need net fruit
  provide netboot-files
}

get() {
  value=$(JSON.sh < ${config} | grep $1 | cut -f2)
  if [ ${value} = "" ] || [ ${value} = '""' ]
  then
    echo
  else
    echo ${value} | xargs printf
  fi
}

get_master_addr() {
  local iface=$(cat /etc/network/interfaces | grep 'iface eth.* static' | awk '{print $2}')
  if [ "$iface" != "" ]; then
    echo $(ip -4 addr show dev ${iface} | grep 'inet ' | head -1 | awk '{print $2}')
    return 0
  fi
  return 1
}

build_rootfs() {
  local rootdir=$1
  local masteraddr=$(get_master_addr)
  local ret=0
  local packages="alpine-base openssh openssh-server docker singularity bash python e2fsprogs nfs-utils curl"

  [ "$masteraddr" = "" ] && return 1

  local masterip=$(ipcalc.sh "$masteraddr" | cut -d' ' -f1)  

  if [ $(date -R | cut -d' ' -f4) -lt 2017 ]; then
    logger -t fruit-netboot-files -s "Waiting 30s for ntpd to set up a correct clock time. Current: $(date)"
    sleep 30
    if [ $(date -R | cut -d' ' -f4) -lt 2017 ]; then
      logger -t fruit-netboot-files -s "WARNING: system clock time is still incorrect. Current: $(date)"
    else
      logger -t fruit-netboot-files -s "Current clock time: $(date)"
    fi
  fi

  # Create rootdir
  mkdir -p $rootdir 1>/dev/null 2>/dev/null
  ret=$((ret + $?))

  # Install alpine base installation onto rootdir
  apk -X $apks -U --allow-untrusted --root $rootdir --initdb add $packages 1>/dev/null 2>/dev/null
  ret=$((ret + $?))

  # Copy device files
  cp -rf /dev/* $rootdir/dev/
  ret=$((ret + $?))

  # Generate resolv.conf
  echo "nameserver $masterip" > $rootdir/etc/resolv.conf

  # Preparing chroot
  mount -t proc none $rootdir/proc && \
  mount -o bind /dev $rootdir/dev && \
  mount -o bind /sys $rootdir/sys

  # Set up the system to be bootable
  chroot $rootdir /sbin/rc-update add devfs sysinit && \
  chroot $rootdir /sbin/rc-update add dmesg sysinit && \
  chroot $rootdir /sbin/rc-update add mdev sysinit && \
  \
  chroot $rootdir /sbin/rc-update add swclock boot && \
  chroot $rootdir /sbin/rc-update add modules boot && \
  chroot $rootdir /sbin/rc-update add sysctl boot && \
  chroot $rootdir /sbin/rc-update add hostname boot && \
  chroot $rootdir /sbin/rc-update add bootmisc boot && \
  chroot $rootdir /sbin/rc-update add syslog boot && \
  \
  chroot $rootdir /sbin/rc-update add local default && \
  \
  chroot $rootdir /sbin/rc-update add mount-ro shutdown && \
  chroot $rootdir /sbin/rc-update add killprocs shutdown && \
  chroot $rootdir /sbin/rc-update add savecache shutdown 1>/dev/null 2>/dev/null
  ret=$((ret + $?))

  # Copy firmware
  mkdir -p ${rootdir}/lib/firmware && \
  tar -C ${rootdir}/lib/firmware -xvzf ${home}/firmware.tar.gz 1>/dev/null 2>/dev/null
  ret=$((ret + $?))

  # Copy kernel modules
  mkdir -p ${rootdir}/lib/modules && \
  tar -C ${rootdir}/lib/modules -xvzf ${home}/modules.tar.gz 1>/dev/null 2>/dev/null
  ret=$((ret + $?))

  # Set motd
  cat > $rootdir/etc/motd <<EOL            
                                                     
FRµIT OS - Netboot Client.
                 
EOL

  # Set root password
  local entry=$(cat /etc/shadow | grep "^root")
  sed -i '/^root/ d' $rootdir/etc/shadow && \
  echo "$entry" >> $rootdir/etc/shadow
  ret=$((ret + $?))

  # Set up timezone
  local zone=GB
  apk -X $apks -U --allow-untrusted --root $rootdir add tzdata 1>/dev/null 2>/dev/null && \
  chroot $rootdir setup-timezone -z $zone 1>/dev/null 2>/dev/null && \
  apk -X $apks -U --allow-untrusted --root $rootdir del tzdata 1>/dev/null 2>/dev/null
  ret=$((ret + $?))

  # Set up keyboard
  keymap=gb
  apk -X $apks -U --allow-untrusted --root $rootdir add kbd-bkeymaps 1>/dev/null 2>/dev/null && \
  chroot $rootdir setup-keymap $keymap $keymap 1>/dev/null 2>/dev/null && \
  apk -X $apks -U --allow-untrusted --root $rootdir del kbd-bkeymaps 1>/dev/null 2>/dev/null
  ret=$((ret + $?))

  # Set up sshd
  cp -f /etc/ssh/sshd_config ${rootdir}/etc/ssh/ && \
  cp -f /etc/ssh/ssh_host_* ${rootdir}/etc/ssh/ && \
  cp -f /etc/ssh/ssh_config ${rootdir}/etc/ssh/ && \
  chroot $rootdir /sbin/rc-update add sshd default 1>/dev/null 2>/dev/null
  ret=$((ret + $?))

  # Set up ssh key files for remote login
  if [ ! -e /root/.ssh/id_rsa ] || [ ! -e /root/.ssh/id_rsa.pub ]; then
    ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa
  fi
  mkdir -p ${rootdir}/root/.ssh/ && \
  cp -f /root/.ssh/id_rsa.pub ${rootdir}/root/.ssh/authorized_keys
  ret=$((ret + $?))
  
  # Set up ntpd
  cat > $rootdir/etc/conf.d/ntpd <<EOL
NTPD_OPTS="-N"
EOL
  servers="pool.ntp.org time.apple.com $masterip"
  for srv in ${servers}; do
    echo "server $srv" >> ${rootdir}/etc/ntp.conf
  done
  chroot $rootdir /sbin/rc-update add ntpd default 1>/dev/null 2>/dev/null
  ret=$((ret + $?))

  # Set up crond
  chroot $rootdir /sbin/rc-update add crond default 1>/dev/null 2>/dev/null
  ret=$((ret + $?))

  # Set up fstab
  cat > $rootdir/etc/fstab <<EOL
proc	/proc	proc	defaults	0	0
tmpfs	/tmp	tmpfs	defaults,noatime,nosuid,nodev,noexec,mode=1777,size=128M	0	0
EOL

  # Set up networking
  cat > $rootdir/etc/network/interfaces <<EOL
auto lo
iface lo inet loopback

#auto eth0
#iface eth0 inet manual
EOL

  # Set up overlay boot script
  mkdir -p $rootdir/media/overlay && \
  cp $home/fruit-overlay.sh $rootdir/etc/init.d/fruit-overlay && \
  chmod +x $rootdir/etc/init.d/fruit-overlay && \
  chroot $rootdir /sbin/rc-update add fruit-overlay sysinit 1>/dev/null 2>/dev/null
  ret=$((ret + $?))

  # Set up data boot script
  cp $home/fruit-data.sh $rootdir/etc/init.d/fruit-data && \
  chmod +x $rootdir/etc/init.d/fruit-data && \
  chroot $rootdir /sbin/rc-update add fruit-data default 1>/dev/null 2>/dev/null
  ret=$((ret + $?))

  # Copy hostname script
  cp $home/fruit-hostname.sh $rootdir/etc/local.d/fruit-hostname.start && \
  chmod +x $rootdir/etc/local.d/fruit-hostname.start
  ret=$((ret + $?))

  # Copy monitoring script and set up its cron
  cp $home/fruit-monitor.sh $rootdir/etc/local.d/fruit-monitor.start && \
  chmod +x $rootdir/etc/local.d/fruit-monitor.start && \
  echo '*/1  *  *  *  *    /etc/local.d/fruit-monitor.start' >> $rootdir/etc/crontabs/root
  ret=$((ret + $?))

  # Install curl to be used by monitoring script
  repo=$(cat /etc/apk/repositories | grep http | grep main | head -1)
  ret=$((ret + $?))

  # Copy JSON.sh
  cp $(which JSON.sh) $rootdir/usr/bin/
  ret=$((ret + $?))

  # Set up data directory
  mkdir -p $rootdir/data

  # Add pre-up net script
  mkdir -p $rootdir/etc/network/if-pre-up.d
  cat > $rootdir/etc/network/if-pre-up.d/flush <<'EOL'
#!/bin/sh

ip addr flush dev $IFACE
EOL
  chmod +x $rootdir/etc/network/if-pre-up.d/flush

  # Fix syslogd timestamp issue
  echo 'SYSLOGD_OPTS=""' > $rootdir/etc/conf.d/syslog

  # Add master node's name
  uname -n > ${rootdir}/etc/netboot-master

  # Clean up chroot
  umount -f $rootdir/proc
  umount -f $rootdir/dev
  umount -f $rootdir/sys

  # Set up APK repositories
  cat /etc/apk/repositories | grep http > ${rootdir}/etc/apk/repositories
  ret=$((ret + $?))

  return $ret
}

build_tftp() {
  local addr=$(get_master_addr)
  local ip=$(ipcalc.sh "$addr" | cut -d' ' -f1)

  mkdir -p ${target}/tftp && \
  tar -C ${target}/tftp -xvzf ${home}/boot.tar.gz 1>/dev/null && \
  sed -i "s/<nfs-server-ip>/${ip}/" ${target}/tftp/cmdline.txt

  return $?
}

create_share() {
  mkdir -p ${share} && \
  chmod 1777 ${share}
  return $?
}

start() {
  local ret=0

  if [ ! -e ${target}/rootfs ]; then
    ebegin "Building netboot root filesystem"
    build_rootfs ${target}/rootfs && \
    eend $?
    ret=$((ret + $?))
  else
    echo "Netboot root filesystem has been built."
  fi

  if [ ! -e ${target}/tftp ]; then
    ebegin "Building tftp netboot files"
    build_tftp
    eend $?
    ret=$((ret + $?))
  else
    echo "tftp netboot files have been built."
  fi

  ebegin "Creating netboot share"
  create_share
  eend $?
  ret=$((ret + $?))

  return $ret
}

stop() {
  local ret=0
  local dirs="${target}/rootfs ${target}/tftp"

  ebegin "Deleting netboot files"
  for dir in $dirs; do
    if [ -e ${dir} ]; then
      rm -rf ${dir}
      ret=$((ret + $?))
    fi
  done
  eend $ret
  return $ret
}
