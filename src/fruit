#!/sbin/openrc-run

#
# Requirement:
# - Alpine Linux v3.6
# - RaspberryPi 0, 1, 2, or 3
#

description="Deploy Fruit configurations."

CONFIG_FILE=/media/mmcblk0p1/fruit.json

depend() {
  before net
  after root bootmisc modules syslog sysctl
  keyword -lxc -docker
}

get_config() {
  VALUE=$(JSON.sh < ${CONFIG_FILE} | grep $1 | cut -f2)
  if [ "$VALUE" = "" ] || [ "${VALUE}" = '""' ]
  then
    echo
  else
    echo ${VALUE} | xargs printf
  fi
}

fix_ttyS0_bug() {
  [ ! -f /dev/ttyS0 ] && ln -sf /dev/ttyAMA0 /dev/ttyS0
}

setup_users() {
  HASH=$(get_config '\["user","root","password"\]')
  if [ "$HASH" != "" ]
  then
    sed -i '/^root/ d' /etc/shadow && \
    echo "root:$HASH:1:0:99999:7:::" >> /etc/shadow
    logger -t fruit "Updated root's password."
  fi
}

setup_hostname() {
  HOSTNAME=$(get_config '\["name"\]')
  if [ "$HOSTNAME" != "" ]
  then
    echo "$HOSTNAME" > /etc/hostname
    echo "127.0.1.1    $HOSTNAME" >> /etc/hosts
    hostname $HOSTNAME
    logger -t fruit "Set hostname to $HOSTNAME."
  fi
}

setup_timezone() {
  ZONE=$(get_config '\["timezone"\]')
  if [ "$ZONE" = "" ]; then ZONE="GB"; fi
  ZONE=$(echo "$ZONE" | awk '{print toupper($0)}')

  ebegin "Setting timezone to ${ZONE}"
  apk add tzdata 1>/dev/null  && \
  setup-timezone -z $ZONE     && \
  apk del tzdata 1>/dev/null
  eend $?

  logger -t fruit "Set timezone to $ZONE."
}

setup_keyboard() {
  KEYBOARD=$(get_config '\["keyboard"\]')
  if [ "$KEYBOARD" = "" ]; then KEYBOARD="gb"; fi
  ZONE=$(echo "$ZONE" | awk '{print tolower($0)}')
  KEYMAP=$(echo "$KEYBOARD" | cut -d' ' -f1)
  VARIANT=$(echo "$KEYBOARD" | cut -d' ' -f2)

  ebegin "Setting keyboard to ${KEYMAP} ${VARIANT}"
  apk add kbd-bkeymaps 1>/dev/null  && \
  setup-keymap $KEYMAP $VARIANT     && \
  apk del kbd-bkeymaps 1>/dev/null
  eend $?

  logger -t fruit "Set keyboard layout to keymap=$KEYMAP variant=$VARIANT."
}

setup_wpa_supplicant() {
  if [ ! -f /etc/wpa_supplicant/wpa_supplicant.conf ]
  then
    apk add wireless-tools wpa_supplicant 1>/dev/null
    SSID=$(get_config '\["wpa","ssid"\]')
    USERNAME=$(get_config '\["wpa","username"\]')
    PASSWORD=$(get_config '\["wpa","password"\]')
    if [ "$SSID" != "" ] && [ "$PASSWORD" != "" ]
    then
      if [ "$SSID" = "eduroam" ]
      then
        cat > /etc/wpa_supplicant/wpa_supplicant.conf <<EOL
network={
  ssid="eduroam"
  scan_ssid=1
  key_mgmt=WPA-EAP
  eap=PEAP
  phase1="peaplabel=0"
  phase2="auth=MSCHAPV2"
  identity="$USERNAME"
  password="$PASSWORD"
}
EOL
      else
        /sbin/wpa_passphrase $SSID $PASSWORD > /etc/wpa_supplicant/wpa_supplicant.conf
      fi
      /sbin/rc-service wpa_supplicant start
      logger -t fruit "Set wpa_supplicant to SSID=$SSID."
    fi
  fi
}

setup_net_interface() {
  # Usage: setup_net_interface <iface>
  # e.g. setup_net_interface "eth0"
  iface=$1
  addr=$(get_config "\[\"network\",\"$iface\"\]")
  if [ "$addr" = "" ]; then
    addr="dhcp"
  fi

  ebegin "Setting $iface to $addr"
  if [ "$addr" = "dhcp" ]
  then
    cat >> /etc/network/interfaces <<EOL
auto $iface
iface $iface inet dhcp

EOL
  elif [ "$addr" != "" ]
  then
    res=$(ipcalc.sh "$addr")
    ipaddr=$(echo $res | cut -d' ' -f1)
    netmask=$(echo $res | cut -d' ' -f2)
    network=$(echo $res | cut -d' ' -f3)
    broadcast=$(echo $res | cut -d' ' -f4)
    cat >> /etc/network/interfaces <<EOL
auto $iface
iface $iface inet static
    address $ipaddr
    netmask $netmask
    network $network
    broadcast $broadcast

EOL
  else
    false
  fi
  eend $?

  logger -t fruit "Set interface $iface's address to $addr"
}

setup_networking() {
  local ifaces=$(ip -o link show | cut -d' ' -f2 | sed 's/:$//')
  local wpa_setup=0

  # loopback
  cat > /etc/network/interfaces <<EOL
auto lo
iface lo inet loopback

EOL

  for iface in ${ifaces}; do
    prefix=${iface%[0-9]}
    if [ "$prefix" = "eth" ] || [ "$prefix" = "wlan" ]; then
      if [ "$prefix" = "wlan" ] && [ ${wpa_setup} -eq 0 ]; then
        setup_wpa_supplicant
        wpa_setup=1
      fi
      setup_net_interface "$iface"
    fi
  done
  
  /sbin/rc-update add networking boot
}

install_sshd() {
  ebegin "Setting up openssh server"
  apk add openssh openssh-server 1>/dev/null && \
  sed -i '/^PermitRootLogin / d' /etc/ssh/sshd_config && \
  sed -i '/^PasswordAuthentication / d' /etc/ssh/sshd_config && \
  sed -i '/^PermitEmptyPasswords / d' /etc/ssh/sshd_config && \
	cat >> /etc/ssh/sshd_config <<EOL
PermitRootLogin yes
PasswordAuthentication no
PermitEmptyPasswords no
EOL
  /sbin/rc-update add sshd default
  eend $?
}

setup_ntpd() {
  ebegin "Setting up ntp"
  mode=$(get_config '\["mode"\]')
  echo 'NTPD_OPTS="-N"' > /etc/conf.d/ntpd
  servers=$(get_config '\["ntp"\]')
  servers="pool.ntp.org time.apple.com $servers"
  for s in ${servers}; do
    echo "server ${s}" >> /etc/ntp.conf
  done
  /sbin/rc-update add ntpd default
  eend $?
}

setup_cron() {
  rc-update add crond default
  /sbin/rc-update add local default

  chmod +x /etc/local.d/cron-fruit.start && \
  echo '*/1  *    *    *    *     /etc/local.d/cron-fruit.start' >> /etc/crontabs/root
  logger -t fruit 'Installed cron-fruit.start'
}

install_apk_repositories() {
  dest=/etc/apk/repositories
  for repo in ${apk_repositories}
  do
    echo ${repo} >> ${dest}
  done
}

install_openvpn() {
  if [ -f /media/mmcblk0p1/openvpn-data.tar.gz ]
  then
    apk add openvpn 1>/dev/null 2>/dev/null && \
    tar -C /etc/openvpn -xzf /media/mmcblk0p1/openvpn-data.tar.gz && \
    logger -t fruit "Installed openvpn."
    enabled=$(get_config '\["vpn"\]')
    [ "$enabled" != "false" ] && rc-update add openvpn default
  fi
}

install_singularity() {
  apk add singularity bash python e2fsprogs 1>/dev/null 2>/dev/null && \
    logger -t fruit "Installed singularity."
}

setup_docker() {
  apk add docker 1>/dev/null 2>/dev/null && \
  logger -t fruit "Installed docker."

  enabled=$(get_config '\["docker"\]')
  [ "$enabled" = "true" ] && rc-update add docker default

  if [ -d /data ] && [ $(mount | grep ' on /data ' | wc -l) -ne 0 ]; then
    ebegin 'Setup docker data files on /data/docker'
    mkdir -p /var/lib/docker \
      && mkdir -p /data/docker \
      && mkdir -p /data/.docker.workdir \
      && echo "overlay /var/lib/docker overlay lowerdir=/var/lib/docker,upperdir=/data/docker,workdir=/data/.docker.workdir 0 0" >> /etc/fstab \
      && mount /var/lib/docker
    eend $?
  fi
}

install_qemu() {
  apk add qemu 1>/dev/null 2>/dev/null && \
    logger -t fruit "Installed qemu."
}

setup_volume_data() {
  local mmcdev=/dev/mmcblk0
  local newdev=/dev/mmcblk0p2
  # For future: https://unix.stackexchange.com/questions/136269/corruption-proof-sd-card-filesystem-for-embedded-linux
  local fstype=btrfs
  local mkfs="mkfs.${fstype}"
  local package="btrfs-progs"
  #Â From https://wiki.debian.org/Btrfs (question: What are the recommended options for installing on a pendrive, a SD card or a slow SSD drive?)
  local fsopts="noatime,compress=lzo,commit=0,ssd_spread,autodefrag"
  local dir=/data
  local ret=0

  if [ $(fdisk -lu ${mmcdev} | grep "$newdev" | wc -l) -eq 0 ]; then
    ebegin "Creating partition data"
    apk add parted $package 1>/dev/null && \
    modprobe $fstype 1>/dev/null && \
    {
      freesize=$(parted -ms ${mmcdev} unit MB print free | grep ':free;' | tail -1 | cut -d':' -f4)
      freesize=${freesize%MB}
      if [ "$freesize" != "" ] && [ ${freesize} -gt 100 ]; then
        start=$(parted -ms ${mmcdev} unit MB print free | grep ':free;' | tail -1 | cut -d':' -f2)
        parted -s ${mmcdev} mkpart primary ${fstype} ${start} 100%
        if [ $(blkid ${newdev} | grep "TYPE=\"${fstype}\"" | wc -l) -eq 0 ]; then
          ${mkfs} -f ${newdev}
        fi
      else
        false
      fi
    }
    ret=$((ret + $?))
    eend $ret
  fi

  if [ $ret -eq 0 ] && [ $(mount | grep ${newdev} | wc -l) -eq 0 ]; then
    ebegin "Mounting ${dir}"
    mkdir -p ${dir} \
      && echo "${newdev}  ${dir}  ${fstype}  ${fsopts}  0  0" >> /etc/fstab \
      && mount ${dir} \
      && chmod 1777 ${dir}
    ret=$((ret + $?))
    eend $ret
  fi

  [ $ret -eq 0 ] && logger -t 'fruit' -s "${newdev} has been mounted onto ${dir}"

  return $ret
}

setup_netboot() {
  mode=$(get_config '\["mode"\]')
  if [ $mode = "master" ]; then
    /sbin/rc-update add fruit-netboot default
  fi
}

start() {
  fix_ttyS0_bug
  setup_users
  setup_hostname
  setup_timezone
  setup_keyboard
  setup_networking
  setup_volume_data
  install_sshd
  install_apk_repositories
  install_openvpn
  install_singularity
  install_qemu
  setup_docker
  setup_ntpd
  setup_cron
  setup_netboot
}
