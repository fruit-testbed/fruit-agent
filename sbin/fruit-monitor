#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__),'../share/fruit/python'))
import fruit.agent.config
import fruit.auth
import fruit.auth.ssh_key
import json
import subprocess as sp
import re
import tempfile
import argparse
import syslog
import traceback
import http.client
# import urllib.request -- TODO: use this instead of shelling out to curl perhaps


__DOCKER_SOCK__ = "/var/run/docker.sock"
__DOCKER_API_VERSION__ = "v1.35"

__P2P_UPDATE_SOCK__ = "/var/run/p2pupdate.sock"
__P2P_UPDATE_VERSION__ = "v1"

__LOCATION_CACHE__ = "/data/.location"


def _cpus():
    stat = {}
    with open("/proc/stat") as fin:
        for line in fin:
            if line[:3] != "cpu":
                break
            if line[:4] == "cpu ":
                continue
            parts = re.split(r"\s+", line.strip())
            label = parts.pop(0)
            user, nice, system, idle, iowait, irq, softirq, steal, _, \
                    _ = map(lambda s: float(s), parts)
            idle = idle + iowait
            non_idle = user + nice + system + irq + softirq + steal
            total = idle + non_idle
            stat[label] = {
                "usage": 100 * non_idle / total,
                "idle": 100 * idle / total,
                "user": 100 * user / total,
                "system": 100 * system / total,
            }

    throttled = _call(["/opt/vc/bin/vcgencmd", "get_throttled"])
    if throttled is not None:
        throttled = throttled.lstrip("throttled=")

    return {
        "stat": stat,
        "scaling": _read_file("/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor", "").strip(),
        "throttled": throttled,
        }


def _read_file(filepath, onError=None):
    try:
        return open(filepath).read()
    except:
        return onError


def _call(*args, **kwargs):
    try:
        output = str(sp.check_output(*args, **kwargs), "utf-8")
        if output[-1] in ["\n", "\0"]:
            output = output[:-1]
        return output
    except:
        return None if "onError" not in kwargs else kwargs["onError"]


def _memory():
    lines = _call(["free", "-b"])
    if lines is None:
        return None
    lines = lines.splitlines()
    _, total, used, free, _, buffers, _ = re.split(r"\s+", lines[1].strip())
    return {
        "total": total,
        "used": used,
        "free": free,
        "buffers": buffers
    }


def _volumes():
    lines = _call(["df", "-T"])
    if lines is None:
        return None
    lines = lines.strip().splitlines()
    lines.pop(0)
    included = ["/", "/media/root-rw", "/media/root-ro", "/media/data"]
    volumes = {}
    for line in lines:
        fs, typ, size, used, free, _, mounted = re.split(r"\s+", line.strip())
        if mounted in included:
            volumes[mounted] = {
                "filesystem": fs,
                "type": typ,
                "size": size,
                "used": used,
                "free": free,
            }
    return volumes


def _os_service():
    lines = _call(["rc-status", "-C"])
    if lines is None:
        return None
    lines = lines.splitlines()
    services = {}
    for line in lines:
        if not line.startswith(' ') or line.startswith(' * '):
            # Skip " * Caching service dependencies ... [ ok ]"
            #  and "Runlevel: default" lines.
            continue
        name, _, status, _ = re.split(r"\s+", line.strip())
        services[name] = status
    return services


def _pkg_version(name):
    lines = _call(["apk", "version", name])
    if lines is None:
        return None
    lines = lines.splitlines()
    return re.split(r"\s+", lines[1])[0].lstrip("%s-" % name)


def _os_kernel():
    return {
        "version": _call(["uname", "-r"]),
        "architecture": _call(["uname", "-m"]),
        }


def _os_version():
    version = _call(["grep", "VERSION", "/etc/os-release"])
    if version is None:
        return None
    return version.split("=")[1].strip()


def _os():
    return {
        "version": _os_version(),
        "uptime": _call(["uptime"]),
        "fruit-agent": _pkg_version("fruit-agent"),
        "timezone": _call(["date", "+%Z %z"]),
        "local_datetime": _call(["date", "-R"]),
        "service": _os_service(),
        "hostname": _call(["hostname"]),
        "kernel": _os_kernel(),
    }


def _docker():
    return {
        "images": _docker_images(),
        "containers": _docker_containers(),
    }


def __unix_socket_http_rpc(socketpath, pseudohostname, urlpath, default=None):
    if not os.path.exists(socketpath):
        return default
    cmd = ["curl", "-fs", "--unix-socket", socketpath, "http://%s%s" % (pseudohostname, urlpath)]
    try:
        return json.loads(_call(cmd))
    except sp.CalledProcessError:
        return default


def __docker(urlpath):
    return __unix_socket_http_rpc(__DOCKER_SOCK__, __DOCKER_API_VERSION__, urlpath)


def _docker_images():
    return __docker("/images/json?all=true")


def _docker_containers():
    return __docker("/containers/json?all=true")


def _piserial():
    return _read_file("/sys/firmware/devicetree/base/serial-number", "").lstrip("0").replace('\0','')


def _board():
    serial = _piserial()

    revision = _call(["hexdump", "/sys/firmware/devicetree/base/system/linux,revision"])
    if revision is not None:
        revision = re.split(r"\s+", revision)
        revision = revision[1][0:2] + revision[2][2:4] + revision[2][0:2]

    model = _read_file("/sys/firmware/devicetree/base/model")
    if model is not None:
        model = model.strip()[:-1]

    tempC = _read_file("/sys/class/thermal/thermal_zone0/temp")
    if tempC is not None:
        tempC = float(tempC) / 1000.

    return {
        "serial": serial,
        "revision": revision,
        "model": model,
        "temperature": tempC,
    }


def _network():
    lines = _call(["ip", "-o", "link", "show"])
    if lines is None:
        return None
    nets = {}
    lines = lines.strip().splitlines()
    for line in lines:
        _, iface, _, _, _, _, _, _, state, _ = line.split(" ", 9)
        iface = iface.rstrip(":").split("@")[0]
        if iface != "lo":
            if state == "DOWN":
                nets[iface] = None
                continue
            ip = sp.Popen(["ip", "addr", "show", "dev", iface, "scope", "global"], stdout=sp.PIPE)
            grep = sp.Popen(["grep", " inet"], stdin=ip.stdout, stdout=sp.PIPE)
            inets, _ = grep.communicate()
            ip.wait()
            inets = str(inets, 'utf-8')
            nets[iface] = []
            for inet in inets.strip().splitlines():
                _, addr, _ = inet.lstrip().split(" ", 2)
                nets[iface].append(addr)
    return nets


def _fruit_json():
    local_config = "/run/fruit.json@local"
    server_config = "/run/fruit.json@server"
    secrets = ["api_key", "wpa"]
    if not os.path.exists(local_config):
        local = None
    else:
        with open(local_config, "r") as fin:
            local = json.load(fin)
            for key in secrets:
                local.pop(key, None)

    if not os.path.exists(server_config):
        server = None
    else:
        with open(server_config, "r") as fin:
            server = json.load(fin)

    return {"local": local, "server": server}


def piid():
    piid = _piserial()
    if piid:
        piid = "pi" + piid
    return piid


def _p2p_update():
    return {
        "config": _p2p_update_config(),
        "overlay": _p2p_update_overlay(),
        "updates": _p2p_update_updates(),
    }


def __p2p_update(urlpath):
    return __unix_socket_http_rpc(__P2P_UPDATE_SOCK__, __P2P_UPDATE_VERSION__, urlpath)


def _p2p_update_config():
    return __p2p_update("/config")


def _p2p_update_overlay():
    stat = __p2p_update("/overlay")
    if isinstance(stat, dict):
        peers = __p2p_update("/overlay/peers")
        if peers is not None:
            stat['peers'] = peers
    return stat


def _p2p_update_updates():
    updates = {}
    uuids = __p2p_update("/update")
    if isinstance(uuids, list):
        for uuid in uuids:
            u = __p2p_update("/update/%s" % (uuid,))
            if u is not None:
                updates[uuid] = u
    return updates


def _http_get(host, path="/", secure=False):
    if secure:
        conn = http.client.HTTPSConnection(host)
    else:
        conn = http.client.HTTPConnection(host)
    conn.request("GET", path)
    res = conn.getresponse()
    statusbody = res.status, str(res.read(), 'utf-8')
    conn.close()
    return statusbody


def _location():
    status, ext_ip = _http_get("api.ipify.org", secure=True)
    if status != 200:
        return None
    if os.path.exists(__LOCATION_CACHE__):
        try:
            with open(__LOCATION_CACHE__, 'r') as f:
                location = json.load(f)
                if 'ip' in location and location['ip'] == ext_ip:
                    return location
        except:
            pass
    p = "/%s?access_key=%s" % (ext_ip, "f2426e25c518a8fbd2ae2272d69edb8c")
    status, body = _http_get("api.ipstack.com", path=p)
    if status == 200:
        try:
            location = json.loads(body)
            with open(__LOCATION_CACHE__, 'w') as f:
                f.write(body)
            return location
        except:
            pass


def generate():
    return {
        "id": piid(),
        "os": _os(),
        "volumes": _volumes(),
        "docker": _docker(),
        "board": _board(),
        "network": _network(),
        "cpus": _cpus(),
        "memory": _memory(),
        "fruit.json": _fruit_json(),
        "location": _location(),
    }


def _api_token():
    sk = fruit.auth.ssh_key.SshPrivateKey('/etc/ssh/ssh_host_ed25519_key')
    sk.unprotect(None) ## the host key has no passphrase
    identity = sk.public_key
    return fruit.auth.make_authenticated_identity(identity, sk.signer_for_identity(identity))


def _owner_user_id():
    user_id = fruit.agent.config.get('/public-key')
    if user_id is None:
        # Fall back to legacy api_key
        user_id = fruit.agent.config.get('/api_key')
        if user_id is None:
            raise RuntimeError("Neither public-key nor api_key defined in fruit.json")
    return user_id


def send():
    api_url = fruit.agent.config.get('/api_url', "https://fruit-testbed.org/api")
    fd, fname = tempfile.mkstemp(text=True)
    try:
        with os.fdopen(fd, 'w') as fout:
            json.dump(generate(), fout)
        url = "%s/resource/%s/monitor" % (api_url, _owner_user_id())
        header1 = "Content-Type: application/json"
        header2 = "X-API-Key: %s" % (_api_token(),)
        exitcode = sp.check_call(["curl", "-fs", "-X", "POST", "-H", header1,
                                  "-H", header2, "-d", "@%s" % (fname,), url])
        if exitcode == 0:
            syslog.syslog("Sent monitoring data to %s" % (api_url,))
        else:
            syslog.syslog(syslog.LOG_ERR, "Failed to send monitoring data to %s" % (api_url,))
        return exitcode
    except:
        syslog.syslog(syslog.LOG_ERR,
                      "Failed to send monitoring data to %s -- %s" % \
                      (api_url, traceback.format_exc()))
        _, exc, _ = sys.exc_info()
        raise exc
    finally:
        os.remove(fname)


def print_usage():
    print("--- Usage ---")
    print(" Send data to server: %s" % sys.argv[0])
    print("Print data to stdout: %s -" % sys.argv[0])


if __name__ == "__main__":
    syslog.openlog(ident="fruit-monitor")
    if len(sys.argv) >= 2:
        if sys.argv[1] == "-":
            json.dump(generate(), sys.stdout)
            sys.stdout.write("\n")
            sys.stdout.flush()
        else:
            print_usage()
    else:
        sys.exit(send())
