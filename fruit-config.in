#!/bin/sh

server_address="fruit-testbed.org"
server_api_prefix="/api"
src_config=/media/mmcblk0p1/fruit.json
config_local=/run/fruit.json@local
config_server=/run/fruit.json@server

copy_config_local_to_run() {
	if [ -e ${src_config} ]; then
		cp -f ${src_config} ${config_local}
		[ $? -ne 0 ] && logger -st fruit "ERROR: cannot copy to /run/fruit.json"
	fi
	[ ! -e ${config_local} ] && echo '{}' > ${config_local}
	chmod 0400 ${config_local}
}

download_resource() {
	# $1: resource name to be download
	# $2: target output file

	local name="pi$(piserial)"
	local url="https://${server_address}${server_api_prefix}/node/${name}/$1"
	local api_key=$(fruit-value '\["api_key"\]')
	[ "$api_key" = "" ] \
		&& logger -st fruit "ERROR: 'api_key' is not defined in fruit.json" \
		&& return 1

	local ret=0
	local tmpfile=$(mktemp)
	curl --connect-timeout 10 -fsL -o "$tmpfile" -H "X-API-Key: $api_key" ${url}
	if [ $? -ne 0 ]; then
		logger -st fruit "ERROR: Failed to download $url"
		ret=2
	else
		mkdir -p "$(dirname "$2")" \
			&& cp -f ${tmpfile} "$2"
		ret=$?
	fi
	rm -f ${tmpfile}
	return $ret
}

download_config_server_to_run() {
	download_resource "config" ${config_server}
	[ $? -ne 0 ] \
		&& logger -st fruit "WARNING: Failed downloading config from server" \
		&& return 1
	chmod 0400 ${config_server}
	return $?
}

download_ssh_public_key() {
	local target="/root/.ssh/authorized_keys"
	download_resource "ssh_key" ${target}
	[ $? -ne 0 ] \
		&& logger -st fruit "WARNING: Failed to download SSH Public Key from server" \
		&& return 0
	chmod 0700 $(dirname "$target") && chmod 0640 ${target}
	return $?
}

status() {
	# $1: service name
	echo "$(rc-service $1 status | awk '{print $3}')"
}

setup_openvpn() {
	local enabled=$(fruit-value '\["vpn"\]')
	local config="/run/openvpn.tar.gz"
	if [ "$enabled" != "true" ]; then
		[ "$(status openvpn)" != "stopped" ] && rc-service openvpn stop || true
		for filepath in /etc/openvpn/*; do
			ext="${filepath##*.}"
			[ "$ext" != "sh" ] && rm -f $filepath
		done
		rm -f ${config}
		return $?
	fi

	download_resource "openvpn" "${config}.new"
	[ $? -ne 0 ] \
		&& logger -st fruit "WARNING: Failed to download OpenVPN config from server" \
		&& return 1
	diff ${config} ${config}.new 1>/dev/null 2>/dev/null
	if [ $? -ne 0 ]; then
		mv -f ${config}.new ${config} \
			&& chmod 0600 ${config} \
			&& tar -C /etc/openvpn/ -xzf ${config}
		[ "$(status openvpn)" != "stopped" ] && rc-service openvpn stop || true
	fi
	rm -f ${config}.new
	rc-service openvpn start 2>/dev/null
	return 0
}

setup_user_root() {
	hash=$(fruit-value '\["root-password"\]')
  if [ "$hash" = "" ]; then
    hash=$(fruit-value '\["user","root","password"\]')
  fi
	if [ "$hash" != "" ]; then
		sed -i '/^root/ d' /etc/shadow && \
			echo "root:$hash:1:0:99999:7:::" >> /etc/shadow && \
			logger -st fruit "Updated root's password"
	fi
}

setup_hostname() {
	hostname=$(fruit-value '\["name"\]')
	if [ "$hostname" = "" ]; then
		hostname="pi$(piserial)"
	fi
	echo "$hostname" > /etc/hostname
	echo "127.0.1.1   $hostname" >> /etc/hosts
	hostname $hostname
	logger -st fruit "Set hostname to $hostname"
}

setup_timezone() {
	zone=$(fruit-value '\["timezone"\]')
	if [ "$zone" = "" ]; then
		zone="GB"
	fi
	zone=$(echo "$zone" | awk '{print toupper($0)}')
	[ ! -f /etc/zoneinfo/${zone} ] \
		&& setup-timezone -z $zone \
		&& logger -st fruit "Set timezone to $zone"
}

setup_keyboard() {
	local keyboard=$(fruit-value '\["keyboard"\]')
	if [ "$keyboard" = "" ]; then
		keyboard="gb"
	fi
	local keymap=$(echo "$keyboard" | cut -d' ' -f1)
	local variant=$(echo "$keyboard" | cut -d' ' -f2)
	[ -f /etc/keymap/${variant}.bmap.gz ] && return 0
	setup-keymap $keymap $variant && \
		logger -st fruit "Set keyboard to keymap=$keymap variant=$variant"
}

setup_ntp_boot() {
	for s in "pool.ntp.org time.apple.com $(fruit-value '\["ntp"\]')"; do
		echo "server ${s}" >> /etc/ntp.conf
	done
	echo 'NTPD_OPTS="-N -l"' > /etc/conf.d/ntpd
}

setup_ntp_default() {
	local restart=0
	for s in pool.ntp.org time.apple.com $(fruit-value '\["ntp"\]'); do
		grep "^server ${s}$" /etc/ntp.conf 1>/dev/null 2>/dev/null
		[ $? -ne 0 ] && echo "server ${s}" >> /etc/ntp.conf && restart=1
	done
	[ $restart -ne 0 ] && rc-service ntpd restart
	return 0
}

setup_wpa_supplicant() {
	local ssid=$(fruit-value '\["wpa","ssid"\]')
	[ "$ssid" = "" ] && return 1

	local username=$(fruit-value '\["wpa","username"\]')
	local password=$(fruit-value '\["wpa","password"\]')
	[ "$username" = "" ] && [ "$password" = "" ] && return 2

	if [ "$username" != "" ]; then
		cat > /etc/wpa_supplicant/wpa_supplicant.conf <<EOL
network={
	ssid="$ssid"
	scan_ssid=1
	key_mgmt=WPA-EAP
	eap=PEAP
	phase1="peaplabel=0"
	phase2="auth=MSCHAPV2"
	identity="$username"
	password="$password"
}
EOL
	else
		wpa_passphrase $ssid $password > /etc/wpa_supplicant/wpa_supplicant.conf
	fi
	ret=$?
	logger -st fruit "Set up wpa_supplicant SSID=$ssid"
	return $ret
}

# $0: interface to be set up
# $1: interface requires wpa_supplicant
setup_network_interface() {
	local outfile=$1
	local iface=$2
	local wpa_supp=$3
	local addr=$(fruit-value "\[\"network\",\"$iface\"\]")
	local wpa_pass=$(fruit-value '\["wpa","password"\]')
	
	if [ "$wpa_pass" = "" ]; then
		wpa_supp="no"
	fi

	if [ "$addr" = "dhcp" ]; then
		cat >> $outfile <<-EOL

			auto $iface
			iface $iface inet dhcp
		EOL
		[ "$wpa_supp" = yes ] && cat >> $outfile <<EOL
	pre-up wpa_supplicant -B -c/etc/wpa_supplicant/wpa_supplicant.conf -i${iface}
	post-down killall -q wpa_supplicant
EOL
		logger -st fruit "Set $iface to $addr"
	elif [ "$addr" != "" ]; then
		ipaddr=$(sipcalc "$addr" | grep 'Host address\t' | awk '{print $4}')
		if [ "$ipaddr" = "" ]; then
			logger -st fruit "ERROR: invalid address of $iface: $ipaddr"
			false
		else
			netmask=$(sipcalc "$addr" | grep 'Network mask\t' | awk '{print $4}')
			network=$(sipcalc "$addr" | grep 'Network address\t' | awk '{print $4}')
			broadcast=$(sipcalc "$addr" | grep 'Broadcast address\t' | awk '{print $4}')
			cat >> $outfile <<EOL

auto $iface
iface $iface inet static
	address $ipaddr
	netmask $netmask
	network $network
	broadcast $broadcast
EOL
			[ "$wpa_supp" = yes ] && cat >> $outfile <<EOL
	pre-up wpa_supplicant -B -c/etc/wpa_supplicant/wpa_supplicant.conf -i${iface}
	post-down killall -q wpa_supplicant
EOL
			logger -st fruit "Set $iface to $addr"
		fi
	fi
}

setup_network() {
	local ifaces=$(ip -o link show | cut -d' ' -f2 | sed 's/:$//')
	local outfile=/etc/network/interfaces

	# loopback
	cat > $outfile <<-EOL
		auto lo
		iface lo inet loopback

	EOL

	for iface in ${ifaces}; do
		case "$iface" in
			eth*)
				setup_network_interface "$outfile" "$iface"
				;;
			wlan*)
				setup_wpa_supplicant && \
					setup_network_interface "$outfile" "$iface" "yes"
				;;
		esac
	done
}

setup_data_volume() {
	local mmcdev=/dev/mmcblk0
	local newdev=/dev/mmcblk0p4
	# Reference: https://unix.stackexchange.com/questions/136269/corruption-proof-sd-card-filesystem-for-embedded-linux
	local fstype=btrfs
	local mkfs=mkfs.btrfs
	# From https://wiki.debian.org/Btrfs (question: What are the
	# recommended options for installing on a pendrive, a SD card or
	# slow SSD drive?)
	local fsopts="noatime,compress=lzo,commit=0,ssd_spread,autodefrag"
	local dir=/media/data
	local ret=0

	if [ $(fdisk -lu ${mmcdev} | grep "$newdev" | wc -l) -eq 0 ]; then
		modprobe $fstype 1>/dev/null && \
		{
			freesize=$(parted -ms ${mmcdev} unit MB print free | grep ':free;' | tail -1 | cut -d':' -f4)
			freesize=${freesize%MB}
			if [ "$freesize" != "" ] && [ ${freesize} -gt 100 ]; then
				start=$(parted -ms ${mmcdev} unit MB print free | grep ':free;' | tail -1 | cut -d':' -f2)
				parted -s ${mmcdev} mkpart primary ${fstype} ${start} 100%
				if [ $(blkid ${newdev} | grep "TYPE=\"${fstype}\"" | wc -l) -eq 0 ]; then
					${mkfs} -f ${newdev}
				fi
			else
				false
			fi
		} && \
		logger -st fruit "Created data volume"
		ret=$((ret + $?))
	fi

	if [ $ret -eq 0 ] && [ $(mount | grep ${newdev} | wc -l) -eq 0 ]; then
		mkdir -p ${dir} \
			&& mount -t ${fstype} -o ${fsopts} ${newdev} ${dir} \
			&& chmod 1777 ${dir} \
			&& logger -st fruit "Mounted data volume onto ${dir}"
		ret=$((ret + $?))
	fi

	[ $ret -ne 0 ] && logger -st fruit "ERROR: Setup data volume failed"

	return $ret
}

setup_docker() {
	local enabled=$(fruit-value '\["docker"\]')
	local datadir=/media/data
	local ret=0

	if [ ! -L /var/lib/docker ] && [ "$(status docker)" == "stopped" ]; then
		mkdir -p /media/data/.docker \
			&& rm -rf /var/lib/docker \
			&& ln -sf /media/data/.docker /var/lib/docker \
			&& logger -st fruit "Linked /media/data/.docker to /var/lib/docker" \
			|| logger -st fruit "Failed to link docker data directory to data volume"
		ret=$((ret + $?))
	fi

	if [ ! -e /etc/docker/daemon.json ]; then
		mkdir -p /etc/docker
		cat > /etc/docker/daemon.json <<-EOF
		{
			"storage-driver": "btrfs",
			"ipv6": true,
			"fixed-cidr-v6": "fc00:1:2::/64"
		}
		EOF
		ret=$((ret + $?))
	fi

	if [ "$enables" = "false" ]; then
		[ $(rc-update show default | grep docker | wc -l) -ne 0 ] && rc-update del docker default
		[ "$(status docker)" = "started" ] && rc-service docker stop || true
	else
		[ $(rc-update show default | grep docker | wc -l) -eq 0 ] && rc-update add docker default
		[ "$(status docker)" = "stopped" ] && rc-service docker start || true
	fi
	ret=$((ret + $?))

	[ $ret -ne 0 ] && logger -st fruit "ERROR: Setup Docker failed"

	return $ret
}

setup_sshd() {
	local config=/etc/ssh/sshd_config
	sed -i 's/^#PermitRootLogin prohibit-password/PermitRootLogin prohibit-password/g' ${config} \
		&& sed -i 's/^#PasswordAuthentication yes/PasswordAuthentication no/g' ${config}
	return $?
}

setup_cron() {
	cat >> /etc/crontabs/root <<-EOL
	*/1   *  *  *  *  fruit-monitor
	*/15  *  *  *  *  timeout -t 600 fruit-config cron
	*/30     *  *  *  *  fruit-update cron
	59    4  *  *  *  [ -f /run/fruit-update.reboot ] && reboot || true
	*/3   *  *  *  *  fruit-container
	EOL
	logger -st fruit "Added cron entries of fruit-monitor and fruit-config"
}

fix_syslogd_config() {
	cat > /etc/conf.d/syslog <<-EOL
	SYSLOGD_OPTS=""
	EOL
	return $?
}

fix_syslogd_timestamp() {
	if [ "$(tail -1 /var/log/messages | cut -d' ' -f4)" != "$(hostname)" ]; then
		# restart syslogd so it can pick up updated system time set by ntp
		rc-service syslog restart
	fi
}

setup_avahi() {
	[ ! -f /etc/avahi/avahi-daemon.conf ] && return 1
	sed -i "s/^#host-name=.*$/host-name=$(hostname)/" /etc/avahi/avahi-daemon.conf
	sed -i "s/^#domain-name=.*$/domain-name=local/" /etc/avahi/avahi-daemon.conf
	sed -i "s/^#enable-wide-area=.*$/enable-wide-area=no/" /etc/avahi/avahi-daemon.conf
	return 0
}

setup_etc_ssh_overlay() {
	mkdir -p /media/data/.etc_ssh/etc_ssh \
		&& mkdir -p /media/data/.etc_ssh/work \
		&& mount -t overlay \
			-o lowerdir=/etc/ssh,upperdir=/media/data/.etc_ssh/etc_ssh,workdir=/media/data/.etc_ssh/work \
			overlayfs /etc/ssh
	local ret=$?
	[ $ret -eq 0 ] \
		&& logger -st fruit "Mounted an overlay on /etc/ssh" \
		|| logger -st fruit "Failed to mount an overlay on /etc/ssh"
	return $ret
}

setup_builtin_led() {
	# $1: led's path of /sys/*
	# $2: state
	if [ "$2" = "on" ]; then
		echo 0 > $1/brightness
		echo 1 > $1/brightness
	elif [ "$2" = "off" ]; then
		echo 0 > $1/brightness
	elif [ "$2" != "" ]; then
		echo 0 > $1/brightness
		echo "$2" > $1/trigger
	fi
}

setup_leds() {
	[ -e /sys/class/leds/led0 ] \
		&& setup_builtin_led "/sys/class/leds/led0" $(fruit-value '\["leds","green"\]')
	[ -e /sys/class/leds/led1 ] \
		&& setup_builtin_led "/sys/class/leds/led1" $(fruit-value '\["leds","red"\]')
}

setup_kernel_modules() {
	modules=$(fruit-value '\["modules"\]')
	hash=$(echo -n "$modules" | md5sum | awk '{print $1}')
	if [ ! -e /run/fruit.modules.$hash ]; then
		for mod in $modules; do
			modprobe $mod
			[ $? -ne 0 ] \
				&& logger -st fruit "ERROR: Failed loading kernel module $mod"
		done
		rm -f /run/fruit.modules.*
		touch /run/fruit.modules.$hash
	fi
}

setup_dtparam() {
	params=$(fruit-value '\["dtparam"\]')
	hash=$(echo -n "$params" | md5sum | awk '{print $1}')
	if [ ! -e /run/fruit.dtparam.$hash ]; then
		for param in $params; do
			/opt/vc/bin/dtparam $param
			[ $? -ne 0 ] \
				&& logger -st fruit "ERROR: Failed to invoke 'dtparam $param'"
		done
		rm -f /run/fruit.dtparam.*
		touch /run/fruit.dtparam.$hash
	fi
}

do_bootafter() {
	local now=$(date +%s)
	local up=$(cat /proc/uptime | cut -d' ' -f1 | cut -d'.' -f1)
	local boottime=$(($now - $up))
	local bootafter=$(fruit-value boot-after)
	if [ "$bootafter" != "" ] && [ "$bootafter" -lt "$now" ]; then
		if [ $boottime -lt $bootafter ]; then
			logger -st fruit "rebooting since boot-time=$boottime < boot-after=$bootafter"
			reboot
		fi
	fi
	return 0
}

setup_p2p_update() {
	local sumfile=/var/run/p2p-update.config.md5
	local config=$(fruit-value /p2p-update)
	local configfile=/etc/p2p-update/config.json

	if [ "$config" != "" ]; then
		echo "$config" > "$configfile"
	fi
	md5sum -c "$sumfile" 1>/dev/null 2>/dev/null
	if [ $? -ne 0 ]; then
		rc-service p2p-update restart
	fi
	md5sum "$configfile" > "$sumfile"

	pidof p2p-update 1>/dev/null 2>/dev/null
	if [ $? -ne 0 ]; then
		rc-service p2p-update restart
	fi
}

setup_dnsmasq() {
	local pid=$(pidof dnsmasq)
	local iface=$(fruit-value /dnsmasq/interface)
	local addr="10.2.0.1/24"
	local dhcprange="10.2.0.10,10.2.0.254,24"

	if [ "$pid" = "" ]; then
		[ "$iface" = "" ] && return 0
	else
		if [ "$iface" = "" ]; then
			rc-service dnsmasq stop
			rm -f /var/run/fruit.dnsmasq
			ip addr flush dev ${iface}
			return 0
		elif [ -f /var/run/fruit.dnsmasq ] && [ "$(cat /var/run/fruit.dnsmasq)" = "$iface" ]; then
			return 0
		fi

		rc-service dnsmasq stop
		rm -f /var/run/fruit.dnsmasq
		ip addr flush dev ${iface}
	fi

	ip addr add ${addr} brd + dev ${iface}
	[ $? -ne 0 ] && return 1
	ip link set ${iface} up
	[ $? -ne 0 ] && return 2

	ip=$(echo "$addr" | cut -d'/' -f1)
	cat > /etc/dnsmasq.d/fruit.conf <<-EOF
	interface=${iface}

	domain=cluster.fruit-testbed.org
	dhcp-range=${dhcprange}
	dhcp-option=option:ntp-server,${ip}
	log-dhcp
	EOF

	grep "^dnsmasq" /etc/passwd 1>/dev/null 2>/dev/null
	if [ $? -ne 0 ]; then
		echo 'dnsmasq:x:105:105:dnsmasq:/dev/null:/sbin/nologin' >> /etc/passwd
		echo 'dnsmasq:x:105:' >> /etc/group
		echo 'dnsmasq:!::0:::::' >> /etc/shadow
	fi

	rc-service dnsmasq restart \
		&& echo "$iface" > /var/run/fruit.dnsmasq
	return $?
}

setup_nat() {
	local iface=$(fruit-value /nat)

	if [ "$iface" != "" ]; then
		enable_nat "$iface"
	else
		disable_nat
	fi

	return $?
}

disable_nat() {
	[ ! -f /var/run/fruit.nat ] && return 0

	local iface=$(cat /var/run/fruit.nat 2>/dev/null | awk '{print $1}')
	local netaddr=$(cat /var/run/fruit.nat 2>/dev/null | awk '{print $2}')
	local ret=0

	logger -st fruit "disabling NAT on interface:$iface network-address:$netaddr"

	iptables -C FORWARD -o ${iface} -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT 1>/dev/null 2>/dev/null
	[ $? -eq 0 ] \
		&& iptables -D FORWARD -o ${iface} -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT 1>/dev/null 2>/dev/null \
		|| true
	ret=$((ret + $?))

	iptables -C FORWARD -i ${iface} ! -o ${iface} -j ACCEPT 1>/dev/null 2>/dev/null
	[ $? -eq 0 ] \
		&& iptables -D FORWARD -i ${iface} ! -o ${iface} -j ACCEPT 1>/dev/null 2>/dev/null \
		|| true
	ret=$((ret + $?))

	iptables -t nat -C POSTROUTING -s ${netaddr} ! -o ${iface} -j MASQUERADE 1>/dev/null 2>/dev/null
	[ $? -eq 0 ] \
		&& iptables -t nat -D POSTROUTING -s ${netaddr} ! -o ${iface} -j MASQUERADE 1>/dev/null 2>/dev/null \
		|| true
	ret=$((ret + $?))

	[ $ret -eq 0 ] \
		&& rm -f /var/run/fruit.nat \
		|| false
	
	ret=$?
	[ $ret -eq 0 ] \
		&& logger -st fruit "disabled NAT on interface:$iface network-address:$netaddr"

	return $ret
}

enable_nat() {
	local iface
	local ret=0

	if [ -f /var/run/fruit.nat ]; then
		iface=$(cat /var/run/fruit.nat 2>/dev/null | awk '{print $1}')
		[ "$iface" = "$1" ] && return 0
		disable_nat
		[ $? -ne 0 ] && return 11
	fi

	[ "$1" = "" ] && return 0

	sysctl -w net.ipv4.ip_forward=1 1>/dev/null
	ret=$((ret + $?))

	iface=$1
	local addr=$(ip -4 addr show dev ${iface} scope global up | grep 'inet ' | awk '{print $2}')
	local netaddr="$(ipcalc -n "$addr" | cut -d'=' -f2)/$(echo "$addr" | cut -d'/' -f2)"

	[ "$netaddr" = "" ] && return 12

	logger -st fruit "enabling NAT on interface:$iface network-address:$netaddr"

	iptables -C FORWARD -o ${iface} -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT 1>/dev/null 2>/dev/null
	[ $? -ne 0 ] \
		&& iptables -A FORWARD -o ${iface} -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT 1>/dev/null 2>/dev/null \
		|| true
	ret=$((ret + $?))

	iptables -C FORWARD -i ${iface} ! -o ${iface} -j ACCEPT 1>/dev/null 2>/dev/null
	[ $? -ne 0 ] \
		&& iptables -A FORWARD -i ${iface} ! -o ${iface} -j ACCEPT 1>/dev/null 2>/dev/null \
		|| true
	ret=$((ret + $?))
	
	iptables -t nat -C POSTROUTING -s ${netaddr} ! -o ${iface} -j MASQUERADE 1>/dev/null 2>/dev/null
	[ $? -ne 0 ] \
		&& iptables -t nat -A POSTROUTING -s ${netaddr} ! -o ${iface} -j MASQUERADE 1>/dev/null 2>/dev/null \
		|| true
	ret=$((ret + $?))

	[ $ret -eq 0 ] \
		&& echo "$iface $netaddr" > /var/run/fruit.nat \
		|| false

	ret=$?
	[ $ret -eq 0 ] \
		&& 	logger -st fruit "enabled NAT on interface:$iface network-address:$netaddr"

	return $ret
}

##### main #####

lockfile="/run/$(basename $0).lock"
[ -f lockfile ] && [ "$(find ${lockfile} -mmin -30 2>/dev/null)" = "" ] \
	&& logger -st fruit "ERROR: Lock file ${lockfile} exists" \
	&& exit 1

rm -f ${lockfile}
touch ${lockfile}

# random sleep between 0-299 seconds
[ "$1" = "cron" ] && sleep $(shuf -i 0-299 -n 1)

case "$(rc-status -r)" in
	boot)
		setup_data_volume
		setup_etc_ssh_overlay
		copy_config_local_to_run
		setup_hostname
		setup_network
		setup_sshd
		setup_cron
		setup_ntp_boot
		setup_avahi
		fix_syslogd_config
		;;
	default)
		copy_config_local_to_run
		download_config_server_to_run
		do_bootafter
		setup_dnsmasq
		setup_nat
		setup_p2p_update
		setup_kernel_modules
		setup_dtparam
		setup_timezone
		setup_ntp_default
		fix_syslogd_timestamp
		download_ssh_public_key
		setup_user_root
		setup_keyboard
		setup_docker
		setup_openvpn
		setup_leds
		;;
	*)
		true
		;;
esac

rm -f ${lockfile}

exit 0
