#!/usr/bin/env python
# -*- coding: utf-8 -*-


from __future__ import print_function
import subprocess as sp
import json
import sys
from os import path
import logging
import logging.handlers


__DOCKER_SOCK__ = '/var/run/docker.sock'
__DOCKER_API_VERSION__ = 'v1.35'
__FRUIT_VALUE__ = '/usr/sbin/fruit-value'


log = logging.getLogger('fruit-container')
log.setLevel(logging.DEBUG)
handler = logging.handlers.SysLogHandler(address = '/dev/log')
log.addHandler(handler)


def list_containers():
    if not path.exists(__DOCKER_SOCK__):
        raise RuntimeError, 'Docker daemon is not running.'
    cmd = ['curl', '-fs', '--unix-socket', __DOCKER_SOCK__,
        'http:/%s/containers/json?all=true' % __DOCKER_API_VERSION__]
    return json.loads(sp.check_output(cmd))


def cleanup(names):
    deployed = list_containers()
    for container in deployed:
        for docker_name in container['Names']:
            docker_name = docker_name.lstrip('/')
            name, ext = path.splitext(docker_name)
            if ext != '.fruit':
                continue
            if name not in names:
                try:
                    sp.check_call(['docker', 'rm', docker_name])
                    log.info("Deleted container '%s' (docker-name: %s)" % (name, docker_name))
                except sp.CalledProcessError as cpe:
                    log.error("Failed deleting container '%s' (docker-name: %s), error-code: %d, command: %s" % \
                            (name, docker_name, cpe.returncode, cpe.cmd))
            break


def deploy(name, specs):
    deployed = list_containers()
    name = name + '.fruit'
    docker_name = '/' + name
    for container in deployed:
        if docker_name in container['Names']:
            log.info("Container '%s' has been deployed" % name)
            return True

    cmd = ['docker', 'run', '-d', '--name', name]
    if 'parameters' in specs and isinstance(specs['parameters'], list):
        cmd = cmd + specs['parameters']
    cmd.append(specs['image'])
    if 'command' in specs and isinstance(specs['command'], list):
        cmd = cmd + specs['command']
    try:
        sp.check_call(cmd)
        log.info("Started container '%s' (docker-name: %s) -- %s" % \
                (name, docker_name, ' '.join(cmd)))
    except sp.CalledProcessError as cpe:
        log.error("Failed deleting container '%s' (docker-name: %s), error-code: %d, command: %s" % \
                (name, docker_name, cpe.returncode, cpe.cmd))


def main():
    try:
        val = sp.check_output([__FRUIT_VALUE__, '/container']).strip()
        if len(val) < 2:
            return
        containers = json.loads(val)
    except sp.CalledProcessError as cpe:
        log.error('Failed getting container config, error-code: %d, command: %s' % \
                (cpe.returncode, cpe.cmd))
        raise RuntimeError, 'ERROR: Failed to get container configs'

    if isinstance(containers, dict):
        for name in containers:
            deploy(name, containers[name])
        cleanup(containers.keys())


if __name__ == '__main__':
    main()
