#!/bin/sh

active=$(mount | grep '/media/root-ro' | grep -v overlay | head -1 | cut -d' ' -f1)
if [ "$active" = "/dev/mmcblk0p2" ]; then
	non_active="/dev/mmcblk0p3"
else
	non_active="/dev/mmcblk0p2"
fi

non_active_dir=/media/root-bak
flag_dir=/media/mmcblk0p1
flag_file="$flag_dir/$(echo "$non_active" | sed 's/\//./g').dirty"

apk_log_file=/var/log/fruit-update-apk.log
echo "started $(date)" >> $apk_log_file

logger -st fruit "Updating $non_active"

mark_dirty() {
	# $1: mark partition $1 as dirty
	mount -o remount,rw $flag_dir && \
		touch $flag_file && \
		mount -o remount,ro $flag_dir
	return $?
}

mark_clean() {
	# $1: mark partition $1 as clean
	mount -o remount,rw $flag_dir && \
		rm -f $flag_file && \
		mount -o remount,ro $flag_dir
	return $?
}

mount_non_active() {
	mkdir -p $non_active_dir && \
		mount $non_active $non_active_dir && \
		mount -t proc non $non_active_dir/proc && \
		mount -o bind /sys $non_active_dir/sys && \
		mount -o bind /dev $non_active_dir/dev
	return $?
}

umount_non_active() {
	umount -f $non_active_dir/dev 1>/dev/null 2>/dev/null
	umount -f $non_active_dir/sys 1>/dev/null 2>/dev/null
	umount -f $non_active_dir/proc 1>/dev/null 2>/dev/null
	[ $(mount | grep " on $non_active_dir " | wc -l) -ne 0 ] && umount -f $non_active_dir || true
	return $?
}

apply_update() {
	local tmp=/media/data/.root-tmp
	local update=/media/root-update
	local ret=0
	local merge=

	mkdir -p $tmp/root $tmp/work $update \
		&& mount -t overlay \
			-o lowerdir=$non_active_dir,upperdir=$tmp/root,workdir=$tmp/work \
			overlayfs $update \
		&& apk -q --root $update update 1>>$apk_log_file 2>>$apk_log_file \
		&& apk --root $update --purge --wait 1200 upgrade \
			1>>$apk_log_file 2>>$apk_log_file \

	ret=$((ret + $?))
	sync
	umount -f $update
	ret=$((ret + $?))

	if [ $ret -eq 0 ]; then
		merge=$(overlayfs-tools merge -l $non_active_dir -u $tmp/root | cut -d' ' -f3)
		if [ -f "$merge" ]; then
			sh $merge 1>/dev/null 2>/dev/null
			ret=$((ret + $?))
			rm -f $merge
		fi
	fi
	sync
	rm -rf $tmp

	# truncate $apk_log_file to maximum 500 lines
	local n=$(wc -l $apk_log_file | cut -d' ' -f1)
	local m=$(($n - 500))
	[ $m -gt 0 ] && sed -i "1,$m d" $apk_log_file

	return $ret
}

recover_non_active() {
	logger -st fruit "Recovering: cloning $active to $non_active"
	dd if=$active of=$non_active 2>/dev/null \
	  && mark_clean $non_active
	local ret=$?
	[ $ret -eq 0 ] && \
		logger -st fruit "Recovered $non_active" || \
		logger -st fruit "ERROR: Failed recovering $non_active"
	return $?
}

umount_non_active
[ $? -ne 0 ] && \
	logger -st fruit "ERROR: Failed to unmount $non_active" && \
	exit 1

if [ -f $flag_file ]; then
	enabled_recovery=$(fruit-value '\["root_partition_recovery"\]')
	if [ "$enabled_recovery" != "false" ]; then
		logger -st fruit "WARNING: $non_active is dirty"
		# do recovery since non-active is dirty
		recover_non_active
		exit 2
	else
		logger -st fruit "ERROR: $non_active is dirty but recovery is disabled (root_partition_recovery=false)"
		exit 3
	fi
fi

# mark non-active root partition as dirty
# then, apply update on non-active root partition
mark_dirty $non_active && \
	mount_non_active && \
	apply_update && \
	umount_non_active && \
	mark_clean $non_active
ret=$?
if [ $ret -eq 0 ]; then
	totalupgraded=$(grep ") Upgrading " /tmp/.fruit-update.apk-upgrade.stdout 2>/dev/null | wc -l)
	totalinstalled=$(grep ") Installing " /tmp/.fruit-update.apk-upgrade.stdout 2>/dev/null | wc -l)
	[ $totalupgraded -gt 0 ] && touch /run/fruit-update.reboot
	[ $totalinstalled -gt 0 ] && touch /run/fruit-update.reboot
	logger -st fruit "Updated $non_active ($totalupgraded packages upgraded, $totalinstalled packages installed)"
else
	umount_non_active
	logger -st fruit "ERROR: Failed updating $non_active"
fi

exit $ret
