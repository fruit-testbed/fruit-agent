#!/bin/sh

if [ "$(fruit-value /fruit/update)" = "false" ]; then
	logger -st fruit "fruit-update is disabled (/fruit/update=false)"
	exit 0
fi

active=$(mount | grep '/media/root-ro' | grep -v overlay | head -1 | cut -d' ' -f1)
if [ "$active" = "/dev/mmcblk0p2" ]; then
	non_active="/dev/mmcblk0p3"
else
	non_active="/dev/mmcblk0p2"
fi

non_active_dir=/media/root-bak
update_dir=/media/root-update
update_tmp=/media/data/.fruit-update.tmp
flag_dir=/media/mmcblk0p1
flag_file="$flag_dir/$(echo "$non_active" | sed 's/\//./g').dirty"

# invoke fruit-config to update fruit.json
fruit-config 1>/dev/null 2>/dev/null

#Â Reset ${apk_log_file} by moving existing logs to ${apk_log_file}.old.
# Remove older logs by keeping the last 500 lines.
apk_log_file=/var/log/fruit-update-apk.log
[ -f $apk_log_file ] && cat $apk_log_file >> $apk_log_file.old
if [ -f $apk_log_file.old ]; then
	n=$(wc -l $apk_log_file.old | cut -d' ' -f1)
	m=$(($n - 500))
	[ $m -gt 0 ] && sed -i "1,$m d" $apk_log_file.old
fi
echo "=== Start $(date) ===" > $apk_log_file

logger -st fruit "Updating $non_active"

mark_dirty() {
	# $1: mark partition $1 as dirty
	mount -o remount,rw $flag_dir && \
		touch $flag_file && \
		mount -o remount,ro $flag_dir
	return $?
}

mark_clean() {
	# $1: mark partition $1 as clean
	mount -o remount,rw $flag_dir && \
		rm -f $flag_file && \
		mount -o remount,ro $flag_dir
	return $?
}

mount_volumes() {
	mkdir -p $non_active_dir $update_dir $update_tmp/root $update_tmp/work \
		&& mount $non_active $non_active_dir \
		&& mount -t overlay \
			-o lowerdir=$non_active_dir,upperdir=$update_tmp/root,workdir=$update_tmp/work \
			overlayfs $update_dir \
		&& mount -t proc non $update_dir/proc \
		&& mount -o bind /dev $update_dir/dev \
		&& mount -o bind /sys $update_dir/sys \
		&& mount -o remount,rw /media/mmcblk0p1 \
		&& mount -o bind /media/mmcblk0p1 $update_dir/media/mmcblk0p1

	return $?
}

umount_update_dir() {
	umount -f $update_dir/media/mmcblk0p1 1>/dev/null 2>/dev/null
	mount -o remount,ro /media/mmcblk0p1 1>/dev/null 2>/dev/null
	umount -f $update_dir/sys 1>/dev/null 2>/dev/null
	umount -f $update_dir/dev 1>/dev/null 2>/dev/null
	umount -f $update_dir/proc 1>/dev/null 2>/dev/null
	umount -f $update_dir 1>/dev/null 2>/dev/null
	return $?
}

umount_volumes() {
	umount_update_dir
	rm -rf $update_tmp

	[ $(mount | grep " on $non_active_dir " | wc -l) -ne 0 ] && umount -f $non_active_dir || true
	return $?
}

update_initramfs() {
	local machine=$(uname -r | cut -d'-' -f3)

	if [ "$(grep ' Upgrading fruit-initramfs (' $apk_log_file)" != "" ] \
		|| [ "$(grep ' Upgrading fruit-rpi2-linux (' $apk_log_file)" != "" ] \
		|| [ "$(grep ' Upgrading fruit-rpi-linux (' $apk_log_file)" != "" ] \
		|| [ "$(grep ' Upgrading fruit-u-boot (' $apk_log_file)" != "" ]
	then
		echo "Updating initramfs..." >> $apk_log_file \
			&& chroot $update_dir /sbin/mkinitfs -o "/boot/initramfs-$machine" \
				$(cat "$update_dir/usr/share/kernel/$machine/kernel.release") \
				1>>$apk_log_file 2>>$apk_log_file \
			&& chroot $update_dir /usr/bin/mkimage -A arm -T ramdisk -C none \
				-n initramfs -d "/boot/initramfs-$machine" /boot/initramfs \
				1>>$apk_log_file 2>>$apk_log_file \
			&& rm -f "$update_dir/boot/initramfs-$machine"
	fi
	return $?
}

update_apk_world() {
	local tmp1=$(mktemp)
	local tmp2=$(mktemp)
	local ret=0

	[ ! -f "$update_dir/etc/apk/world" ] && return 0

	echo "---Updating $update_dir/etc/apk/world---" >> $apk_log_file
	cp -f "$update_dir/etc/apk/world" "$tmp1"
	for x in $(fruit-value /apk/world/absent); do
		cat "$tmp1" | grep "^$x$" > /dev/null
		if [ $? -eq 0 ]; then
			cat "$tmp1" | grep -v "^$x$" > "$tmp2"
			cp "$tmp2" "$tmp1"
			echo "removed $x" >> $apk_log_file
		fi
	done
	for x in $(fruit-value /apk/world/present); do
		cat "$tmp1" | grep "^$x$" > /dev/null
		if [ $? -ne 0 ]; then
			echo "$x" >> "$tmp1"
			echo "added $x" >> $apk_log_file
		fi
	done
	cp -f "$tmp1" "$update_dir/etc/apk/world"
	ret=$?

	rm -f "$tmp1" "$tmp2"
	echo "---Updated $update_dir/etc/apk/world---" >> $apk_log_file

	return $ret
}

apply_update() {
	local ret=0

	update_apk_world
	ret=$((ret + $?))

	local repos_file=$(mktemp)
	if [ "$(fruit-value /apk/repositories/0)" = "" ]; then
		cp "$update_dir/etc/apk/repositories" $repos_file
	else
		local i=0
		while true; do
			repo=$(fruit-value /apk/repositories/$i)
			[ "$repo" = "" ] && break
			echo "$repo" >> $repos_file
			i=$((i + 1))
		done
	fi
	echo "--- repositories ---" >>$apk_log_file
	cat $repos_file >>$apk_log_file

	if [ $? -eq 0 ]; then
		# ignore any error when updating the packages list
		apk -q --root $update_dir --repositories-file $repos_file \
			update 1>>$apk_log_file 2>>$apk_log_file
		# upgrade packages
		apk --root $update_dir --purge --wait 1200 \
				--repositories-file $repos_file \
				upgrade 1>>$apk_log_file 2>>$apk_log_file \
			&& update_initramfs
	fi
	ret=$((ret + $?))

	rm -f $repos_file

	sync
	umount_update_dir
	ret=$((ret + $?))

	if [ $ret -eq 0 ]; then
		local merge=$(overlayfs-tools merge -l $non_active_dir -u $update_tmp/root | cut -d' ' -f3)
		if [ -f "$merge" ]; then
			sh $merge 1>/dev/null 2>/dev/null
			ret=$((ret + $?))
			rm -f $merge
		fi
	fi
	sync

	# fix *.apk-new files
	for f in $(find $non_active_dir -name "*.apk-new"); do
		mv -f $f ${f%.apk-new}
	done

	return $ret
}

recover_non_active() {
	logger -st fruit "Recovering: cloning $active to $non_active"
	dd if=$active of=$non_active 2>/dev/null \
	  && mark_clean $non_active
	local ret=$?
	[ $ret -eq 0 ] && \
		logger -st fruit "Recovered $non_active" || \
		logger -st fruit "ERROR: Failed recovering $non_active"
	return $?
}

lockfile -r 0 /.fruit-update.lock || {
	logger -st fruit "Another fruit-update is already running"
	exit 1
}

umount_volumes
[ $? -ne 0 ] && \
	logger -st fruit "ERROR: Failed to unmount $non_active" && \
	exit 1

if [ -f $flag_file ]; then
	enabled_recovery=$(fruit-value '\["root_partition_recovery"\]')
	if [ "$enabled_recovery" != "false" ]; then
		logger -st fruit "WARNING: $non_active is dirty"
		# do recovery since non-active is dirty
		recover_non_active
		exit 2
	else
		logger -st fruit "ERROR: $non_active is dirty but recovery is disabled (root_partition_recovery=false)"
		exit 3
	fi
fi

# mark non-active root partition as dirty
# then, apply update on non-active root partition
mark_dirty $non_active && \
	mount_volumes && \
	apply_update && \
	umount_volumes && \
	mark_clean $non_active
ret=$?
if [ $ret -eq 0 ]; then
	totalpurged=$(grep ") Purging " $apk_log_file 2>/dev/null | wc -l)
	totalupgraded=$(grep ") Upgrading " $apk_log_file 2>/dev/null | wc -l)
	totalinstalled=$(grep ") Installing " $apk_log_file 2>/dev/null | wc -l)
	[ $totalpurged -gt 0 ] && touch /run/fruit-update.reboot
	[ $totalupgraded -gt 0 ] && touch /run/fruit-update.reboot
	[ $totalinstalled -gt 0 ] && touch /run/fruit-update.reboot
	logger -st fruit "Updated $non_active (packages: $totalpurged purged, $totalupgraded upgraded, $totalinstalled installed)"
else
	umount_volumes
	logger -st fruit "ERROR: Failed updating $non_active"
fi

echo "=== End $(date) ===" >> $apk_log_file

rm -f /.fruit-update.lock

exit $ret
