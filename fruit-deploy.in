#!/bin/sh

src_config=/media/mmcblk0p1/fruit.json
config=/run/fruit.json

copy_config_to_run() {
	if [ -e ${src_config} ]; then
		cp -f ${src_config} ${config}
		[ $? -ne 0 ] && logger -t fruit "ERROR: cannot copy to /run/fruit.json"
	fi
	[ ! -e ${config} ] && echo '{}' > ${config}
	return 0
}

valueof() {
	value=$(JSON.sh < ${config} | grep $1 | cut -f2)
	if [ "$value" = "" ] || [ "${value}" = '""' ]; then
		echo
	else
		echo ${value} | xargs printf
	fi
}

setup_user_root() {
	hash=$(valueof '\["root-password"\]')
	if [ "$hash" != "" ]; then
		sed -i '/^root/ d' /etc/shadow && \
			echo "root:$hash:1:0:99999:7:::" >> /etc/shadow && \
			logger -s -t fruit "Updated root's password"
	fi
}

serial() {
	cat /proc/cpuinfo | grep Serial | awk '{print $3}' | sed 's/^0*//'
}

setup_hostname() {
	hostname=$(valueof '\["name"\]')
	if [ "$hostname" = "" ]; then
		hostname="pi$(serial)"
	fi
	echo "$hostname" > /etc/hostname
	echo "127.0.1.1   $hostname" >> /etc/hosts
	hostname $hostname
	logger -s -t fruit "Set hostname to $hostname"
}

setup_timezone() {
	zone=$(valueof '\["timezone"\]')
	if [ "$zone" = "" ]; then
		zone="GB"
	fi
	zone=$(echo "$zone" | awk '{print toupper($0)}')
	setup-timezone -z $zone && \
		logger -s -t fruit "Set timezone to $zone"
}

setup_keyboard() {
	keyboard=$(valueof '\["keyboard"\]')
	if [ "$keyboard" = "" ]; then
		keyboard="gb"
	fi
	keymap=$(echo "$keyboard" | cut -d' ' -f1)
	variant=$(echo "$keyboard" | cut -d' ' -f2)
	setup-keymap $keymap $variant && \
		logger -s -t fruit "Set keyboard to keymap=$keymap variant=$variant"
}

setup_wpa_supplicant() {
	ssid=$(valueof '\["wpa","ssid"\]')
	[ "$ssid" = "" ] && return 1

	[ "$wpa" = yes ] && return 0
	wpa=yes

	username=$(valueof '\["wpa","username"\]')
	password=$(valueof '\["wpa","password"\]')

	if [ "$username" != "" ]; then
		cat > /etc/wpa_supplicant/wpa_supplicant.conf <<EOL
network={
	ssid="$ssid"
	scan_ssid=1
	key_mgmt=WPA-EAP
	eap=PEAP
	phase1="peaplabel=0"
	phase2="auth=MSCHAPV2"
	identity="$username"
	password="$password"
}
EOL
	else
		wpa_passphrase $ssid $password > /etc/wpa_supplicant/wpa_supplicant.conf
	fi
	ret=$?
	logger -s -t fruit "Set up wpa_supplicant SSID=$ssid"
	return $ret
}

#Â $0: interface to be set up
# $1: interface requires wpa_supplicant
setup_network_interface() {
	iface=$1
	wpa_supp=$2
	addr=$(valueof "\[\"network\",\"$iface\"\]")
	if [ "$addr" = "" ]; then
		addr="dhcp"
	fi

	if [ "$addr" = "dhcp" ]; then
		cat >> /etc/network/interfaces <<-EOL

			auto $iface
			iface $iface inet dhcp
		EOL
		[ "$wpa_supp" = yes ] && printf "\tpre-up rc-service wpa_supplicant start\n" >> /etc/network/interfaces
		logger -t fruit "Set $iface to $addr"
	else
		ipaddr=$(sipcalc "$addr" | grep 'Host address\t' | awk '{print $4}')
		if [ "$ipaddr" = "" ]; then
			logger -t fruit "ERROR: invalid address of $iface: $ipaddr"
			false
		else
			netmask=$(sipcalc "$addr" | grep 'Network mask\t' | awk '{print $4}')
			network=$(sipcalc "$addr" | grep 'Network address\t' | awk '{print $4}')
			broadcast=$(sipcalc "$addr" | grep 'Broadcast address\t' | awk '{print $4}')
			cat >> /etc/network/interfaces <<EOL

auto $iface
iface $iface inet static
	address $ipaddr
	netmask $netmask
	network $network
	broadcast $broadcast
EOL
			[ "$wpa_supp" = yes ] && printf "\tpre-up rc-service wpa_supplicant start\n" >> /etc/network/interfaces
			logger -t fruit "Set $iface to $addr"
		fi
	fi
}

setup_network() {
	local ifaces=$(ip -o link show | cut -d' ' -f2 | sed 's/:$//')
	local wpa=no

	# loopback
	cat > /etc/network/interfaces <<-EOL
		auto lo
		iface lo inet loopback

	EOL

	for iface in ${ifaces}; do
		case "$iface" in
			eth*)
				setup_network_interface "$iface"
				;;
			wlan*)
				setup_wpa_supplicant && \
					setup_network_interface "$iface" "yes"
				;;
		esac
	done
}

setup_monitor() {
	if [ -e /usr/sbin/fruit-monitor ] && [ -e /etc/crontabs/root ] \
		&& [ "$(grep '/usr/sbin/fruit-monitor' /etc/crontabs)" = "" ]
	then
		printf "*/1\t*\t*\t*\t*\t/usr/sbin/fruit-monitor" >> /etc/crontabs/root \
			&& rc-update add crond default \
			&& logger -t fruit "Set up fruit-monitor"
	else
		logger -t fruit "Failed to set up fruit-monitor"
	fi
}

##### main #####

copy_config_to_run
[ $? -ne 0 ] && exit 1

setup_user_root
setup_hostname
setup_timezone
setup_keyboard
setup_network
setup_monitor

exit 0
